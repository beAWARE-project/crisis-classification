from CRCL.FloodCRisisCLassification.Topic106_Risk_Maps import TOP106_Risk_Maps

from datetime import datetime
from collections import OrderedDict
import json

def topic106_create_RiskMap(directory, RS_Name, RS_loc, features_list, polygons_id):

#def topic106_create_RiskMap(directory, RS_Name, RS_loc, features_list):
    position = {"latitude": RS_loc['lat'], "longitude" : RS_loc['long']}
    print("RS_Name = ", RS_Name)
    print("position = ", position)


    # Create the list with the polygons
    Polygon_list = list()


    i = 0
    for feature_item in features_list:

        polyID = feature_item['ID']  #'Poly' + "_" + str(i)
        # print('polyID = ', polyID)
        # print( "Coord lens = ", len(feature_item['Coordinates']), "\n" )

        # Create a list of coordinates of the polygon's vertices
        len_coords = len(feature_item['Coordinates'])
        vertices_list = list()
        for coord_it in range( len_coords ):

                # coord_item = [{ 'latitude': feature_item['Coordinates'][coord_it][1],
                #                'longitude': feature_item['Coordinates'][coord_it][0] }]

                coord_item = {'latitude': feature_item['Coordinates'][coord_it][1],
                              'longitude': feature_item['Coordinates'][coord_it][0]}

                vertices_list.append(coord_item)

        # print("Vertices list of a polygon:", vertices_list)

        # Create the polygon's properties
        properties_item = {'riskclass': feature_item['RiskClass'],
                           'riskvalue': feature_item['RiskValue'],
                           'severity': feature_item['Severity'],
                           'hazard': feature_item['Hazard'],
                           'damage': feature_item['Damage'],
                           'color': feature_item['Color']
        }

        Polygon_item = {'polygonID': polyID, 'vertices': vertices_list, 'properties': properties_item}

        # #############################################################################
        # If ID not inside the list of already polygons created, append into the Topic list
        if feature_item['ID'] not in polygons_id:
            polygons_id.append(feature_item['ID'])
            Polygon_list.append(Polygon_item)
            # Iteration for the polygons ID
            i = i + 1
        # else:
        #     print('Polygon already inside the list')

        # #############################################

    # #################################################
    if len(Polygon_list) == 0:
        return {'Polygons': Polygon_list, 'Topic_Polygons': 'No Topic'}, polygons_id
    # #############################################

    # Set topics106 items
    dataStreamGener = "CRCL"
    dataStreamID = "FLCR_1050_Polygons"
    dataStreamName = "FLRA_Polygons_Risk_Maps"
    dataStreamDescript = "Polygons generated by Risk Map with Return Time 100 years for the River Section " + RS_Name
    lang = "en-US"
    dataStreamCategory = "Met"
    dataStreamSubCategory = "Flood"

    # Set variables for the header of the message
    district = "Vicenza"

    # Unique message identifier
    #msgIdent = datetime.utcnow().isoformat().replace(":", "").replace("-", "").replace(".", "MS")
    msgIdent = RS_Name


    sent_dateTime = datetime.utcnow().replace(microsecond=0).isoformat() + 'Z'
    status = "Actual"
    actionType = "Update"
    scope = "Public"
    code = 20190617001

    msgRMs = TOP106_Risk_Maps(msgIdent, sent_dateTime, status, actionType, scope, district, code,
                              dataStreamGener, dataStreamID, dataStreamName, dataStreamDescript,
                              lang, dataStreamCategory, dataStreamSubCategory, position, Polygon_list)

    # create the header of the object
    msgRMs.create_dictHeader()

    # create the body of the object
    msgRMs.create_dictHeader()

    # create the body of the object
    msgRMs.create_dictBody()

    # create the TOP104_METRIC_REPORT as json for WL forecasts
    top106_item = OrderedDict()
    top106_item['header'] = msgRMs.header
    top106_item['body'] = msgRMs.body

    # write json (top104_item) to output file
    flname = directory + "/" + 'TOP106_Polygon_RiskMaps' + '_' + RS_Name + ".txt"

    with open(flname, 'a') as outfile:
        json.dump(top106_item, outfile, indent=4)

    # #####################################
    return {'Polygons': Polygon_list, 'Topic_Polygons': top106_item}, polygons_id


